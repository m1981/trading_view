//@version=6
indicator("Smart S/R Zones", overlay=true, max_boxes_count=500)

// Input parameters
lookback = input.int(200, "Lookback Period", minval=50)
zone_threshold = input.float(0.2, "Zone Threshold %", minval=0.1, step=0.1)/100
min_touches = input.int(2, "Minimum Touches", minval=2)
atr_mult = input.float(0.5, "ATR Zone Width Multiplier", minval=0.1, step=0.1)

// Colors
var color_resistance = color.new(#ff0000, 80)  // Red with 80% transparency
var color_support = color.new(#00ff00, 80)     // Green with 80% transparency

// Calculate ATR for zone width
atr = ta.atr(14)
zone_width = atr * atr_mult

// Function to detect swing high/low
isSwingHigh(len) =>
    high[len] > high[len + 1] and high[len] > high[len - 1] and high[len] > high[len + 2] and high[len] > high[len - 2]

isSwingLow(len) =>
    low[len] < low[len + 1] and low[len] < low[len - 1] and low[len] < low[len + 2] and low[len] < low[len - 2]

// Structure to store price levels and their touches
type PriceLevel
    float price
    int touches
    bool isResistance
 
var levels = array.new<PriceLevel>()

// Process new swing points
if barstate.islast
    // Clear previous levels
    array.clear(levels)
    
    // Find swing highs and lows
    for i = 2 to lookback
        if isSwingHigh(i)
            level = PriceLevel.new(high[i], 1, true)
            array.push(levels, level)
        if isSwingLow(i)
            level = PriceLevel.new(low[i], 1, false)
            array.push(levels, level)
    
    // Combine nearby levels and count touches
    if array.size(levels) > 0
        for i = array.size(levels) - 1 to 1
            level1 = array.get(levels, i)
            for j = i - 1 to 0
                level2 = array.get(levels, j)
                // If levels are close, combine them
                if math.abs(level1.price - level2.price) / level1.price < zone_threshold
                    level2.touches += level1.touches
                    array.remove(levels, i)
                    break
    
    // Draw zones for significant levels
    var box[] boxes = array.new_box()
    
    // Clear previous boxes
    if array.size(boxes) > 0
        for i = 0 to array.size(boxes) - 1
            box.delete(array.get(boxes, i))
    array.clear(boxes)
    
    // Draw new zones
    for i = 0 to array.size(levels) - 1
        level = array.get(levels, i)
        if level.touches >= min_touches
            zone_top = level.price + zone_width/2
            zone_bottom = level.price - zone_width/2
            zone_color = level.isResistance ? color_resistance : color_support
            
            // Create zone box
            b = box.new(
                 left=bar_index - lookback,
                 top=zone_top,
                 right=bar_index + 10,
                 bottom=zone_bottom,
                 bgcolor=zone_color,
                 border_color=color.new(zone_color, 50))
            array.push(boxes, b)
            
            // Add label
            label.new(
                 x=bar_index + 5,
                 y=level.price,
                 text=level.isResistance ? "R" : "S",
                 color=color.new(color.black, 100),
                 textcolor=color.white,
                 size=size.small)
